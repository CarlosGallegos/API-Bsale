## Documentos

En esta sección están agrupados los métodos asociados a la obtención de documentos emitidos en Bsale.
Estos métodos están orientados a obtener la lista de facturas, boletas, notas de crédito, y cualquier documento asociado a una venta.

Los métodos disponibles son:

## search

```
POST api/documents/sales/search
```


Los filtros posibles de incorporar en la variable "data" (el nombre y el valor de los filtros deben ir en formato json). Es importante notar que la llamada (request) debe enviar al menos un filtro:


document_type_id => Identificador del tipo de documento solicitado (este identificador es propio de Bsale)

code_sii         => Código documento basado en los identificadores de tipo de documento del SII de Chile

document_number  => Número del documentos solicitado (folio documento)

salesman_id      => Identificado único vendedor

office_id        => Identificador único sucursal

client_id        => Identificador único del cliente receptor del documento (para Chile es el RUT)

emission_date_start  => Fecha que indica el rango inicial de busqueda de documentos (el formato debe ser YYYY-MM-DD)

emission_date_end    => Fecha que indica el rango final de busqueda de documentos (el formato debe ser YYYY-MM-DD)

declared_sii     => Documentos declarados al SII (1 declarado 0 no declarado)

others_attrs     => Hash de atributos asociados al documento los cuales son dinámicamente configurados en Bsale


La respuesta (response) de la llamada  entregará la siguiente información en formato JSON

```json
[
  {
    "emission_date": "2013-11-04",  # Fecha de emisión
    "send_status": "0",             # Boolean que identifica si el documento fue enviado por correo
    "read_date": "0000-00-00",      # Fecha de visualización del documento enviado
    "recipients": "",               # e-mail destinatario envío
    "client_email": "",             # e-mail cliente
    "is_credit_note": "0",          # Boolean  que identifica si el documento es una nota de crédito ( 0 no 1 si)
    "client_id": 0,                 # Identificador único de  cliente (id interno bsale)
    "coin_id": "1",                 # Identificador de la moneda del documento (para chile es siempre en $)
    "iva_amount": "3495",           # Monto IVA
    "salesman_name": "Demo Bsale",  # Nombre vendedor
    "client_name": "Sin Cliente",   # Nombre cliente
    "salesman_id": 2,               # Identificador único del vendedor
    "total_attachments": "0",       # Número de documentos asociados
    "total_amount": 21890.0,        # Monto total del documento
    "tax_amount": 3495.0,           # Monto total impuestos (incorpora otros impuestos además del IVA) 
    "has_received": "0",            # Boolean que indentifica si el documento fue visto por el destinatario
    "document_id": 1984,            # Identificador interno del documento
    "client_code": "",              # RUT cliente
    "office_id": 2,                 # Identificador único de sucursal
    "document_type_id": 1,          # Identificador único de tipo de documento
    "coin_symbol": "$",             # Símbolo moneda
    "is_sales_note": "0",           # Si el documento corresponde a una nota de venta
    "office_destination_id": "0",   # Id sucursal de destino en caso de una guía de despacho
    "document_type_name": "Boleta", # Nombre tipo documento
    "total_round": "0",             # identifica si el documento redondea totales
    "document_use": "0",            # Referencia asociada a si fue usado como documento padre de otro.
    "link_xml": null,               # URL asociado al XML del documecnto (sólo para documentos electrónicos)
    "decimal_currency": "0",        # Número decimales moneda
    "observations": "0",            # Observaciones asociadas al documento
    "forwarding_recipients": "",    # e-mail destinatario de un re envío de docuemnto
    "payment": "0",                 # Monto total pago asociado (cero en el caso de crédito)
    "is_shipping": "0",             # Boolean que determina si es guía de despacho el documento.
    "exempt_amount": 0.0,           # Mónto documento exento (caso de boletas y facturas excentas)
    "office_destination": "",       # Nombre sucursal destino (caso guías de despacho)
    "office_cost_center": "",       # Centro de costo asociado a la sucursal
    "send_id": "0",                 # Identificador único de envío de correo
    "expiration_date": "2013-11-04",# Fecha vencimiento
    "document_state": 0,            # Boolean que indica si el  documento esta activo, o fue borrado.
    "office_name": "Casa Matriz",   # Nombre sucursal
    "total_debt": "0",              # Monto total pendiente de pago
    "code_sii": "",                 # Código del SII asociado al tipo de documento
    "send_date": "0000-00-00",      # Fecha de envío por correo electrónico
    "net_amount": 18395.0,          # Monto neto
    "shipping_type_name": "",       # Tipo de transporte asociado a guías de despacho
    "adicional_tax_amount": "0",    # Monto de impuestos específicos
    "details": [
      {
        "cart_item_id": 7056,           # Cantidad línea 1
        "total_amount": 9990.0,         # Subtotal línea 1
        "unit_amount": 8394.95798319328,# Precio unitario línea 1
        "tax_amount": 1595.0,           # Impuesto asociado a línea 1
        "item_cost_center": null,       # Centro de costo (si se trabaja con cc a nivel de la sucursal queda nulo)
        "discount_percentage": 0.0,     # % Descuento línea 1
        "item_sku": "7450071009359",    # SKU ítem línea 1
        "item_ledger_account": null,    # Cuenta contable asociada al ítem línea 1
        "quantity": 1.0,                # Cantidad asociada a la línea 1
        "item_name": "polera brillo ",  # Nombre producto línea 1
        "exempt_amount": 0,             # Monto exento de detalle
        "office_cost_center": "",       # Centro de costo sucursal
        "tax_percentage": "0.19",       # % del impuesto asociado a la línea
        "allows_decimal": "0",          # Boolen que identifica si el ítem permite cantidades decimales
        "net_amount": 8395.0,           # Subtotal neto
        "exchange_rate": 1.0            # Tipo de cambio
      },
      {
        "cart_item_id": 7057,           # Valores correspondentes al segundo detalle
        "total_amount": 11900.0,
        "unit_amount": 10000.0,
        "tax_amount": 1900.0,
        "item_cost_center": "",
        "discount_percentage": 0.0,
        "item_sku": "69823238017480",
        "item_ledger_account": "",
        "quantity": 1.0,
        "item_name": "Polera Blanca ",
        "exempt_amount": 0,
        "office_cost_center": "",
        "tax_percentage": "0.19",
        "allows_decimal": "0",
        "net_amount": 10000.0,
        "exchange_rate": 1.0
      }
    ],
    "is_electronic_document": "0",   # Si es un documento electrónico
    "link_pdf": "",                  # URL PDF del documento
    "document_number": 2503659       # Folio documento
  }
]


```

Un ejemplo de llamada implementada en C Sharp (.NET) sería:

```csharp
//incluir en el encabezado de la clase
using System.Net;

//se define la url del método de la api
string url_api = "http://app.bsale.cl/api/documents/sales/search";
//se genera un request a dicha url, indicando que es los datos a enviar van en formato JSON y que se utilizará el método POST
HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
request.ContentType = "application/json; charset=utf-8";					
request.Method = "POST";
using (StreamWriter stream_writer = new StreamWriter(request.GetRequestStream()))
{
	//se generan los datos a enviar
	
	string document_number = "15";
	
	string post_data = "{'data' : {\\'document_number\\' : \\'" +document_number+ "\\'}, 'access_token' : 'TU_ACCESS_TOKEN'}";
	//paso los parámetros de la llamada
	stream_writer.Write(post_data);
	stream_writer.Flush();
	stream_writer.Close();
	//proceso la llamada
	HttpWebResponse http_response = (HttpWebResponse)request.GetResponse();
	using (StreamReader stream_reader = new StreamReader(httpResponse.GetResponseStream()))
	{
		//capturo la respuesta de la llamada y la muestro
		string result = stream_reader.ReadToEnd();	
		Response.Write(result);				   
	}
}

```

Un ejemplo de llamada implementada en Java sería:

```java
package testbsale;

import org.json.simple.JSONObject;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.simple.JSONArray;

/**
 *
 * @author carlos
 */
public class Testbsale {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {

        String error;
        try {
            // Url base de la API
            String url = "http://app.bsale.cl/api/documents/sales/search";
            
            JSONObject data = new JSONObject();            
            JSONObject filtros = new JSONObject();
            //filtros
            filtros.put("document_number", "15"); 
            //token acceso
            data.put("access_token", "TU_ACCESS_TOKEN");
            data.put("data", filtros);
            
            System.out.println(data.toString());
            
            DefaultHttpClient httpClient = new DefaultHttpClient();
            HttpPost request = new HttpPost(url);
            request.setHeader("Content-Type", "application/json");
            
            StringEntity parametros = new StringEntity(data.toString());            
            parametros.setContentType("application/json");
                        
            request.setEntity(parametros);
            
            HttpResponse response = httpClient.execute(request);

            BufferedReader br = new BufferedReader(
                    new InputStreamReader((response.getEntity().getContent())));

            String output;
            System.out.println("Respuesta de Bsale: \n");
            while ((output = br.readLine()) != null) {
                System.out.println(output);
            }

            httpClient.getConnectionManager().shutdown();

        } catch (MalformedURLException e) {

            e.printStackTrace();

        } catch (IOException e) {

            e.printStackTrace();
        }
    }
}
```

## group_sales

```
POST api/documents/sales/group_sales
```
Retorna totales de las ventas por rango de fecha, agrupados por centro de costo, codigo tributario y fecha de emision.

Los filtros posibles de incorporar en la variable "data":

code_sii         => Código documento basado en los identificadores de tipo de documento del SII de Chile, pueden ser varios separados por coma

emission_date_start  => Fecha de emision que indica el rango inicial de busqueda de documentos (el formato debe ser YYYY-MM-DD)

emission_date_end  => Fecha de emision que indica el rango final de busqueda de documentos (el formato debe ser YYYY-MM-DD)

generation_date_start => Fecha de generacion que indica el rango incial de busqueda de documentos (el formato debe ser YYYY-MM-DD)

generation_date_end => Fecha de generacion que indica el rango final de busqueda de documentos (el formato debe ser YYYY-MM-DD)

per_document => Boolean (0 o 1) indica si el resultado lo agrupa por documento

La respuesta (response) de la llamada  entregará la siguiente información en formato JSON para el resumen general (per_document = 0)

```json
[
  {
    "details": [
      {
        "total_net_amount": 1992103.0,
        "item_ledger_account": null
      }
    ],
    "office_cost_center": "",
    "code_sii": "",
    "total_net_amount": "1992103",
    "taxes": [
      {
        "tax_name": "IVA",
        "tax_id": "1",
        "tax_amount": "378501"
      }
    ],
    "month": "2",
    "total_amount": "2370604",
    "document_type_name": "Boleta",
    "emission_date": "2014-02-14",
    "total_tax_amount": "378501",
    "year": "2014",
    "office_name": "Casa Matriz",
    "count": "6",
    "total_exempt_amount": "0",
    "office_id": 2
  }
]


```
per_document = 1

```json
[
  {
    "total_tax_amount": "369635",
    "document_type_name": "Boleta",
    "year": "2014",
    "month": "2",
    "document_number": 2503948,
    "document_id": 2541,
    "total_net_amount": "1945445",
    "total_exempt_amount": "0",
    "total_amount": "2315080",
    "emission_date": "2014-02-14",
    "details": [
      {
        "total_net_amount": 1945445.0,
        "item_ledger_account": null
      }
    ],
    "office_cost_center": "",
    "code_sii": "",
    "office_name": "Casa Matriz",
    "count": "1",
    "taxes": [
      {
        "tax_amount": "369635",
        "tax_id": "1",
        "tax_name": "IVA"
      }
    ],
    "office_id": 2
  },
  {
    "total_tax_amount": "1595",
    "document_type_name": "Boleta",
    "year": "2014",
    "month": "2",
    "document_number": 2503949,
    "document_id": 2542,
    "total_net_amount": "8395",
    "total_exempt_amount": "0",
    "total_amount": "9990",
    "emission_date": "2014-02-14",
    "details": [
      {
        "total_net_amount": "8395",
        "item_ledger_account": null
      }
    ],
    "office_cost_center": "",
    "code_sii": "",
    "office_name": "Casa Matriz",
    "count": "1",
    "taxes": [
      {
        "tax_amount": "1595",
        "tax_id": "1",
        "tax_name": "IVA"
      }
    ],
    "office_id": 2
  },
  {
    "total_tax_amount": "380",
    "document_type_name": "Factura Electronica",
    "year": "2014",
    "month": "2",
    "document_number": 125412,
    "document_id": 2543,
    "total_net_amount": "2000",
    "total_exempt_amount": "0",
    "total_amount": "2380",
    "emission_date": "2014-02-14",
    "details": [
      {
        "total_net_amount": "2000",
        "item_ledger_account": null
      }
    ],
    "office_cost_center": "",
    "code_sii": "",
    "office_name": "Casa Matriz",
    "count": "1",
    "taxes": [
      {
        "tax_amount": "380",
        "tax_id": "1",
        "tax_name": "IVA"
      }
    ],
    "office_id": 2
  },
  {
    "total_tax_amount": "1834",
    "document_type_name": "Boleta",
    "year": "2014",
    "month": "2",
    "document_number": 2503950,
    "document_id": 2544,
    "total_net_amount": "9650",
    "total_exempt_amount": "0",
    "total_amount": "11484",
    "emission_date": "2014-02-14",
    "details": [
      {
        "total_net_amount": "9650",
        "item_ledger_account": null
      }
    ],
    "office_cost_center": "",
    "code_sii": "",
    "office_name": "Casa Matriz",
    "count": "1",
    "taxes": [
      {
        "tax_amount": "1834",
        "tax_id": "1",
        "tax_name": "IVA"
      }
    ],
    "office_id": 2
  },
  {
    "total_tax_amount": "570",
    "document_type_name": "Boleta",
    "year": "2014",
    "month": "2",
    "document_number": 2503951,
    "document_id": 2546,
    "total_net_amount": "3000",
    "total_exempt_amount": "0",
    "total_amount": "3570",
    "emission_date": "2014-02-14",
    "details": [
      {
        "total_net_amount": "3000",
        "item_ledger_account": null
      }
    ],
    "office_cost_center": "",
    "code_sii": "",
    "office_name": "Casa Matriz",
    "count": "1",
    "taxes": [
      {
        "tax_amount": "570",
        "tax_id": "1",
        "tax_name": "IVA"
      }
    ],
    "office_id": 2
  },
  {
    "total_tax_amount": "4487",
    "document_type_name": "Boleta",
    "year": "2014",
    "month": "2",
    "document_number": 2503952,
    "document_id": 2547,
    "total_net_amount": "23613",
    "total_exempt_amount": "0",
    "total_amount": "28100",
    "emission_date": "2014-02-14",
    "details": [
      {
        "total_net_amount": "23613",
        "item_ledger_account": null
      }
    ],
    "office_cost_center": "",
    "code_sii": "",
    "office_name": "Casa Matriz",
    "count": "1",
    "taxes": [
      {
        "tax_amount": "4487",
        "tax_id": "1",
        "tax_name": "IVA"
      }
    ],
    "office_id": 2
  }
]

```

## create

```
POST api/documents/sales/create
```

El objetivo de este método es la creación de documentos en Bsale y de requerirse, su declaración al SII. 

Los datos de la solicitud deberán ser mandados en formato JSON, y deberán estar contenidos dentro de la variable "data" del request.
A su vez la variable data deberá tener las siguientes estructuras:
  <br>- client => Estructura que contendrá los datos del cliente asociado al documento
  <br>- document => Estructura que contiene los datos generales del documento
  <br>- detail => Estructura que contiene el detalle del documento
  <br>- detail_payment => Estructura que contiene el detalle de pago del documento
  
De esta manera un ejemplo de como debería estar conformada la variable "data" es:


```json
data = {
    "client": {
        "first_name": "Gustavo",
        "last_name": "Montero",
        "code": "7513098-9",
        "email": "gmonterop@imaginex.cl",
        "company": "Germont",
        "activity": "Asesorías Informáticas",
        "address": "Los trigales 372",
        "city": "Santiago",
        "municipality": "Las Condes"
    },
    "document": {
        "document_type_id ": "3",
        "emision_date": "2014-01-29",
        "expiration_date": "2014-01-29",
        "office_id": "2",
        "price_list_id": "1",
        "exchange_rate": "0",
        "number": "223345",
        "declare_sii": "0", #opcional, de no enviarse no se declara al sii
        "send_html": "0", #opcional, de no enviarse no se devuelve el html de impresión
        "id_venta_externa": "87162", #identificador del documento en el sistema que se conecta a la API 
        "detail": [
            {
                "variant_id": "144",
                "quantity": "2",
                "unit_net_value": "1203",
                "discount": "0",
                "comment": "glosa de prueba", #opcional, de no enviar la variante se debe incluir la glosa del producto/servicio
                "product_tax": [{:id_impuesto => "1"}] #al enviar la glosa dinámica se deben incluir los impuestos a considerar
            }
        ],
        "detail_payment": [
            {
                "id_forma_pago": "5",
                "fecha_registro_pago": "2014-01-29",
                "monto_forma_pago": "2406",
                "fecha_cheque": "2014-02-01", #opcional, debe ir en caso de que la forma de pago sea cheque
                "num_cheque": "188654" #opcional, debe ir en caso de que la forma de pago sea cheque
            }
        ]
    }
}

```
Un ejemplo de llamada implementada en PHP sería:

```php
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title></title>
    </head>
    <body>
        <?php
        $url='http://localhost:3000/api/documents/sales/create/';
        //Guarda los filtros de la solicitud en un arrego, el cual debe ser guardado en formato JSON
        $detail=array();
        $client=Array('first_name'=>'Gustavo', 'last_name'=>'Montero', 'code'=>'7513098-9', 'email'=>'gmonterop@imaginex.cl', 'company'=>'Germont', 'activity'=>'Asesorías Informáticas', 'address'=>'Los trigales 372', 'city'=>'Santiago', 'municipality'=>'Las Condes');
        array_push ($detail, Array('variant_id'=>144, 'quantity'=>1, 'unit_net_value'=>1203, 'discount'=>0));
        $document=Array('document_type_id'=>3, 'emision_date'=>'2014-01-29', 'expiration_date'=>'2014-01-29', 'office_id'=>2, 'price_list_id'=>1, 'exchange_rate'=>0, 'number'=>223345, 'detail'=>$detail);
        $data=json_encode(Array('client'=>$client, 'document'=>$document));
        //Se conforma el arrego con las variables POST que se mandarán en el Request 
        $fields = array(

                        'access_token' => '09133626ffa3718dfedb58be12f7cba880c34rtfcfea',
                        'data' => $data                    
				);
        // Se inicializa la llamda CURL, 
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch,CURLOPT_POST, 1);
        curl_setopt($ch,CURLOPT_POSTFIELDS, $fields);
        // // Variable en la que se guarda el response
        $response=curl_exec($ch);
        curl_close($ch);

        // //Esto es sólo para poder visualizar lo que se está retornando
         //print_r($response);
        ?>
    </body>
</html>

```

La respuesta que obtendrán será:

```json
{
    "status": "ok", #estado de la operación "ok" éxito, "fail" error
    "msg": "", #mensaje con descripción en caso de error
    "doc_number": 223347, #número del documento (folio)
    "doc_type": "Nota de Venta", #nombre del tipo de documento
    "doc_total": 1432, #monto total del documento
    "doc_token": "682ab58a2112", #token del documento
    "id": 2456, #id del documento
    "client_id": 74, #id del cliente asociado al documento
    "html_doc": "", #html impresión del documento
    "url_pdf": "", #url timbre sii
}
```

Un ejemplo de llamada implementada en C Sharp (.NET) sería:

```csharp
//incluir en el encabezado de la clase
using System.Net;

//se define la url del método de la api
string url_api = "http://app.bsale.cl/api/documents/sales/create";
//se genera un request a dicha url, indicando que es los datos a enviar van en formato JSON y que se utilizará el método POST
HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
request.ContentType = "application/json; charset=utf-8";					
request.Method = "POST";
using (StreamWriter stream_writer = new StreamWriter(request.GetRequestStream()))
{
	//se generan los datos a enviar
	
	string first_name = "nombre";
	string last_name = "apellido";
	string code = "15286665-8";
	string company = "empresa";
	string address = "direccion";
	string city = "ciudad";
	string municipality = "comuna";
	
	//hash con datos del cliente
	
	string client = @"{\\'first_name\\':\\'" +first_name+ "\\',
					   \\'last_name\\':\\'" +last_name+ "\\',
					   \\'code\\':\\'" +code+ "\\',
					   \\'company\\':\\'" +company+ "\\',
					   \\'address\\':\\'" +address+ "\\',
					   \\'city\\':\\'" +city+ "\\',
					   \\'municipality\\':\\'" +municipality+ "\\'}";	
	
	//id de la variante de producto
	string variant_id = "150";
	//cantidad
	string quantity = "5";
	//valor neto unitario
	string unit_net_value = "10000";
	//descuento
	string discount = "0";
	
	//hash con datos del detalle del documento, ojo que más abajo se indica que pueden ser varios y se pasan al documento como arreglo
	
	string detail = @"{\\'variant_id\\':" +variant_id+ ",
					   \\'quantity\\':" +quantity+ ",
					   \\'unit_net_value\\':" +unit_net_value+ ",
					   \\'discount\\':"+discount+"}";							
	
	string document_type_id = "5"; //id del tipo de documento
	string emission_date = "2013-11-22"; //fecha de emisión
	string expiration_date = "2013-11-22"; //fecha de vencimiento
	string office_id = "2"; //id de la sucursal
	string price_list_id = "1"; //id de la lista de precios
	string number = "12345"; //número de documento (folio)
	string declare_sii = "0"; //se indica si se desea declarar el documento al SII, en este caso no
	string send_html = "1"; //se indica si en la respuesta se desea obtener el formato de impresión del documento
	
	//hash con datos del documento
	string document = @"{\\'document_type_id\\':" +document_type_id+ ",
						 \\'emission_date\\':\\'" +emission_date+ "\\',
						 \\'expiration_date\\':\\'" +expiration_date+ "\\',
						 \\'office_id\\':\\'" +office_id+ "\\',
						 \\'price_list_id\\':\\'" +price_list_id+ "\\',
						 \\'number\\':\\'" +number+ "\\',
						 \\'declare_sii\\':\\'" +declare_sii+ "\\',
						 \\'send_html\\':\\'" +send_html+ "\\',
						 \\'detail\\':[" +detail+ "]}"; //acá asigno todos los detalles del documento, pueden ser más de uno por eso va con [] (arreglo)
	
	string post_data = "{'data' : {'client' : " +client+ ", 'document' : " +document+ " }, 'access_token' : 'TU_ACCESS_TOKEN'}";
	//paso los parámetros de la llamada
	stream_writer.Write(post_data);
	stream_writer.Flush();
	stream_writer.Close();
	//proceso la llamada
	HttpWebResponse http_response = (HttpWebResponse)request.GetResponse();
	using (StreamReader stream_reader = new StreamReader(httpResponse.GetResponseStream()))
	{
		//capturo la respuesta de la llamada y la muestro
		string result = stream_reader.ReadToEnd();	
		Response.Write(result);				   
	}
}

```






